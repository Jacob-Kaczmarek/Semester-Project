# -*- coding: utf-8 -*-
"""update_data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cnKOhORFkIviLIIYx34cJ5ovgfC9FoWj
"""

import pandas as pd
import requests
import os
from datetime import datetime

# Define the file and BLS series
csv_file = "bls_dataframe.csv"
series_ids = {
    "Non-Farm Payrolls": "CES0000000001",
    "Unemployment Rate": "LNS14000000",
    "Total Private Avg Hourly Earnings": "CES0500000003",
    "Civilian Labor Force": "LNS11000000",
}
current_year = datetime.now().year
current_month = datetime.now().month

def fetch_bls_data(series_id, year, month):
    url = f"https://api.bls.gov/publicAPI/v1/timeseries/data/{series_id}?startyear={year}&endyear={year}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if "Results" in data and "series" in data["Results"]:
            return data["Results"]["series"][0]["data"]
        else:
            print(f"Error in data format: {data}")
            return []
    else:
        print(f"Error: {response.status_code}, {response.text}")
        return []

def process_bls_data(raw_data):
    df = pd.DataFrame(raw_data)
    df["value"] = pd.to_numeric(df["value"], errors="coerce")
    df["year"] = pd.to_numeric(df["year"], errors="coerce")
    df["date"] = pd.to_datetime(
        df["year"].astype(str) + "-" + df["period"].str[1:], errors="coerce", format="%Y-%m"
    )
    df.set_index("date", inplace=True)
    return df[["value"]]

# Check if the CSV file exists
if os.path.exists(csv_file):
    combined_data = pd.read_csv(csv_file, index_col=0, parse_dates=True)
else:
    combined_data = pd.DataFrame()

# Fetch and append new data
for series_name, series_id in series_ids.items():
    raw_data = fetch_bls_data(series_id, current_year, current_year)
    if raw_data:
        series_df = process_bls_data(raw_data)
        if series_name in combined_data.columns:
            combined_data.update(series_df.rename(columns={"value": series_name}))
        else:
            combined_data = pd.concat(
                [combined_data, series_df.rename(columns={"value": series_name})], axis=1
            )

# Save updated data
combined_data.to_csv(csv_file)
print("Data successfully updated.")